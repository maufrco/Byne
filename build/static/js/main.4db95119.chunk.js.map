{"version":3,"sources":["components/WSControl.tsx","components/Stocks.tsx","components/ChartStock.tsx","components/ChartTheme.tsx","components/ViewMonitor.tsx","components/Monitor.tsx","App.tsx","index.tsx"],"names":["StocksContext","createContext","useWs","useContext","WSControl","children","ws","useRef","useState","initialConfig","setInitialConfig","stockSymbols","setStockSymbols","isConnected","setIsConnected","Map","monitor","setMonitor","useEffect","current","WebSocket","process","onopen","console","log","error","onerror","disconnect","onmessage","e","message","JSON","parse","data","event","symbol","Object","keys","stocks","value","values","isSubscribed","set","Boolean","find","element","resetMonitor","delete","close","Provider","subscribe","newValue","msg","send","stringify","unsubscribe","filter","item","Stocks","props","Switch","onChange","target","checked","name","inputProps","get","Number","toLocaleString","style","currency","Highcharts","setOptions","colors","backgroundColor","linearGradient","stops","fontFamily","plotBorderColor","title","color","textTransform","fontSize","subtitle","xAxis","gridLineColor","labels","lineColor","minorGridLineColor","tickColor","yAxis","tickWidth","tooltip","plotOptions","series","dataLabels","marker","boxplot","fillColor","candlestick","errorbar","legend","itemStyle","itemHoverStyle","itemHiddenStyle","credits","drilldown","activeAxisLabelStyle","activeDataLabelStyle","navigation","buttonOptions","symbolStroke","theme","fill","rangeSelector","buttonTheme","stroke","states","hover","select","inputBoxBorderColor","inputStyle","labelStyle","navigator","handles","borderColor","outlineColor","maskFill","ChartStock","stockHistoy","setStockHistory","chartRef","length","chart","addPoint","options","type","enabled","animation","x1","x2","y1","y2","text","highcharts","allowChartUpdate","ref","ViewMonitor","companyName","catchPhrase","Monitor","chartSelected","stocksData","map","stock","index","key","FormControl","variant","InputLabel","htmlFor","Select","native","id","aria-label","stocksActived","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMA0BMA,EAAgBC,wBAA8B,IA6H7C,SAASC,IAEd,OADgBC,qBAAWH,GAGdI,MA9Ha,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvBC,EAAKC,mBADiC,EAGFC,qBAHE,mBAGrCC,EAHqC,KAGtBC,EAHsB,OAIJF,mBAAqB,IAJjB,mBAIrCG,EAJqC,KAIvBC,EAJuB,OAKNJ,oBAAkB,GALZ,mBAKrCK,EALqC,KAKxBC,EALwB,OAMdN,mBAAS,IAAIO,KANC,mBAMrCC,EANqC,KAM5BC,EAN4B,KAS5CC,qBAAU,WAkBR,OAjBAZ,EAAGa,QAAU,IAAIC,UAAJ,UAAiBC,SAAjB,OAAkDA,YAAlD,YAA+EA,QAA8B,QAE1Hf,EAAGa,QAAQG,OAAS,WAClB,IACEC,QAAQC,IAAI,cACZ,MAAOC,GACPF,QAAQE,MAAMA,KAGlBnB,EAAGa,QAAQO,QAAU,WACnB,IACEH,QAAQE,MAAM,mCAEd,MAAOA,GACPF,QAAQE,MAAMA,KAGX,WACLE,OAGJ,IAEAT,qBAAU,WACHZ,EAAGa,UACRb,EAAGa,QAAQS,UAAY,SAACC,GACtB,IACE,IAAMC,EAAUC,KAAKC,MAAMH,EAAEI,MAC7B,GAAsB,kBAAlBH,EAAQI,MAA2B,CACrC,IAAMC,EAAUC,OAAOC,KAAKP,EAAQQ,QAAQ,GACtCC,EAASH,OAAOI,OAAOV,EAAQQ,QAAQ,GAC7CG,EAAaN,IAAYlB,EAAW,IAAIF,IAAIC,EAAQ0B,IAAIP,EAAQI,SACrC,cAAlBT,EAAQI,OACjBpB,GAAe,GACfJ,EAAiBoB,IAEjBP,QAAQC,IAAIM,GAEd,MAAOL,GACPF,QAAQE,MAAMA,QAGjB,CAACZ,EAAaF,IA+BjB,IAAM8B,EAAe,SAACN,GAAD,OAA8BQ,QAAQhC,EAAaiC,MAAK,SAAAC,GAAO,OAAIV,IAAWU,OAC7FC,EAAe,SAACX,GAAD,OAAsBnB,EAAQ+B,OAAOZ,IACpDR,EAAa,WACjB,IACE,IAAKrB,EAAGa,QAAS,OACjBL,GAAe,GACfR,EAAGa,QAAQ6B,QACX,MAAOvB,GACPF,QAAQE,MAAMA,KAKlB,OACE,kBAACzB,EAAciD,SAAf,CACEV,MAAO,CACL9B,gBACAI,cACAG,UACAL,eACAuC,UAhDN,SAAoBC,GAClB,IACE,IAAK7C,EAAGa,SAAWsB,EAAaU,GAAW,OAC3C,IAAMC,EAAM,CACVlB,MAAO,YACPI,OAAO,GAAD,mBAAM3B,GAAiB,CAACwC,KAEhCvC,EAAgB,GAAD,mBAAKD,GAAiB,CAACwC,KACtC7C,EAAGa,QAAQkC,KAAKtB,KAAKuB,UAAUF,IAC/B,MAAO3B,GACPF,QAAQE,MAAMA,KAuCZgB,eACAc,YArCN,SAAsBJ,GACpB,IACE,IAAK7C,EAAGa,UAAasB,EAAaU,GAAY,OAC9C,IAAMC,EAAM,CACVlB,MAAO,cACPI,OAAQ,CAACa,IAEXvC,EAAgBD,EAAa6C,QAAO,SAAAC,GAAI,OAAIA,IAASN,MACrDL,EAAaK,GACb7C,EAAGa,QAAQkC,KAAKtB,KAAKuB,UAAUF,IAC/B,MAAO3B,GACPF,QAAQE,MAAMA,OA4BbpB,I,QChHQqD,EAlBU,SAAAC,GAAU,IAAD,EACYzD,IAApCc,EADwB,EACxBA,QAASkC,EADe,EACfA,UAAWK,EADI,EACJA,YACtBpB,EAASwB,EAAMtD,SAKrB,OACE,oCACE,kBAACuD,EAAA,EAAD,CACEC,SANe,SAAC3B,GACpBA,EAAM4B,OAAOC,QAAUb,EAAUf,GAAUoB,EAAYpB,IAMnD6B,KAAM7B,EACN8B,WAAY,CAAE,aAAc,wBAE9B,6BAAMjD,EAAQkD,IAAI/B,IAAYgC,OAAOnD,EAAQkD,IAAI/B,IAAUiC,eAAe,QAAS,CAAEC,MAAO,WAAYC,SAAU,W,kCCZxHC,IAAWC,WCRU,CACnBC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACvHC,gBAAiB,CACfC,eAAgB,CAAC,EAAG,EAAG,EAAG,KAC1BC,MAAO,CACL,CAAC,EAAG,mBACJ,CAAC,EAAG,oBAENP,MAAO,CACLQ,WAAY,2BAEdC,gBAAiB,WAEnBC,MAAO,CACLV,MAAO,CACLW,MAAO,UACPC,cAAe,YACfC,SAAU,SAGdC,SAAU,CACRd,MAAO,CACLW,MAAO,UACPC,cAAe,cAGnBG,MAAO,CACLC,cAAe,UACfC,OAAQ,CACNjB,MAAO,CACLW,MAAO,YAGXO,UAAW,UACXC,mBAAoB,UACpBC,UAAW,UACXV,MAAO,CACLV,MAAO,CACLW,MAAO,aAIbU,MAAO,CACLL,cAAe,UACfC,OAAQ,CACNjB,MAAO,CACLW,MAAO,YAGXO,UAAW,UACXC,mBAAoB,UACpBC,UAAW,UACXE,UAAW,EACXZ,MAAO,CACLV,MAAO,CACLW,MAAO,aAIbY,QAAS,CACPlB,gBAAiB,sBACjBL,MAAO,CACLW,MAAO,YAGXa,YAAa,CACXC,OAAQ,CACNC,WAAY,CACVf,MAAO,UACPX,MAAO,CACLa,SAAU,SAGdc,OAAQ,CACNT,UAAW,SAGfU,QAAS,CACPC,UAAW,WAEbC,YAAa,CACXZ,UAAW,SAEba,SAAU,CACRpB,MAAO,UAGXqB,OAAQ,CACN3B,gBAAiB,qBACjB4B,UAAW,CACTtB,MAAO,WAETuB,eAAgB,CACdvB,MAAO,QAETwB,gBAAiB,CACfxB,MAAO,WAETD,MAAO,CACLV,MAAO,CACLW,MAAO,aAIbyB,QAAS,CACPpC,MAAO,CACLW,MAAO,SAGXM,OAAQ,CACNjB,MAAO,CACLW,MAAO,YAGX0B,UAAW,CACTC,qBAAsB,CACpB3B,MAAO,WAET4B,qBAAsB,CACpB5B,MAAO,YAGX6B,WAAY,CACVC,cAAe,CACbC,aAAc,UACdC,MAAO,CACLC,KAAM,aAKZC,cAAe,CACbC,YAAa,CACXF,KAAM,UACNG,OAAQ,UACR/C,MAAO,CACLW,MAAO,QAETqC,OAAQ,CACNC,MAAO,CACLL,KAAM,UACNG,OAAQ,UACR/C,MAAO,CACLW,MAAO,UAGXuC,OAAQ,CACNN,KAAM,UACNG,OAAQ,UACR/C,MAAO,CACLW,MAAO,YAKfwC,oBAAqB,UACrBC,WAAY,CACV/C,gBAAiB,OACjBM,MAAO,UAET0C,WAAY,CACV1C,MAAO,WAGX2C,UAAW,CACTC,QAAS,CACPlD,gBAAiB,OACjBmD,YAAa,QAEfC,aAAc,OACdC,SAAU,wBACVjC,OAAQ,CACNd,MAAO,UACPO,UAAW,WAEbH,MAAO,CACLC,cAAe,cDtKrB,IAoEe2C,EApEc,SAAC3H,GAAc,IAAD,EACOH,IAAxCc,EADiC,EACjCA,QAASL,EADwB,EACxBA,aAAc8B,EADU,EACVA,aADU,EAEFjC,mBAAmB,IAFjB,mBAElCyH,EAFkC,KAErBC,EAFqB,KAInCC,EAAgB5H,mBAChB4B,EAAS9B,EAASA,SAGxBa,qBAAU,WACJ+G,EAAYG,QAAU,IACxBF,EAAgB,GAAD,mBAAKD,GAAL,CAAsB,CAACjH,EAAQkD,IAAI/B,IAAnC,YAKfgG,EAAShH,QAAQkH,MAAMvC,OAAO,GAAGwC,SAAStH,EAAQkD,IAAI/B,IAAmB,GAAM,KAEhF,CAACnB,EAAQkD,IAAI/B,KAEhBjB,qBAAU,WACFuB,EAAaN,IACjB+F,EAAgB,MAGpB,CAACvH,IAED,IAAM4H,EAA8B,CAClCzC,OAAQ,CACN,CACE0C,KAAM,OACNvG,KAAMgG,EACNjE,KAAM7B,IAGViD,MAAO,CAELE,OAAQ,CACNmD,SAAS,IAGbJ,MAAO,CACLK,WAAW,EACXhE,gBAAiB,CACfC,eAAgB,CAAEgE,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC3ClE,MAAO,CACL,CAAC,EAAG,gBACJ,CAAC,GAAK,mBAEN,CAAC,EAAG,sBAKV6B,QAAS,CAAEgC,SAAS,GACpB1D,MAAO,CACLgE,KAAM,KAGV,OACE,kBAAC,IAAD,CACEC,WAAYzE,IACZ0E,kBAvDqB,EAwDrBV,QAASA,EACTW,IAAMf,KEvDGgB,EAZe,SAAAxF,GAAS,MAEQA,EAAMtD,SAA3C8B,EAF6B,EAE7BA,OAAQiH,EAFqB,EAErBA,YAAaC,EAFQ,EAERA,YAC7B,OACE,oCACE,kBAAC,EAAD,KAAalH,GACZiH,EAFH,MAEmBC,EACjB,kBAAC,EAAD,KAASlH,K,wBC0CAmH,EA9CW,WAAO,IAAD,EACuBpJ,IAA7CO,EADsB,EACtBA,cAAeI,EADO,EACPA,YAAaF,EADN,EACMA,aADN,EAEYH,qBAFZ,mBAEvB+I,EAFuB,UAU9B,OACE,oCAEG9I,QAFH,IAEGA,OAFH,EAEGA,EAAe+I,WAAWC,KACzB,SAACC,EAAOC,GACN,OAAQD,EACN,yBAAKE,IAAKD,GACR,kBAAC,EAAD,KAAcD,IAEd,QAGR,6BACA,2CACY7I,EAAe,2CAA2B,8CADtD,KAIA,kBAACgJ,EAAA,EAAD,CAAaC,QAAQ,YACnB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,oBAApB,yBACA,kBAACC,EAAA,EAAD,CACEC,QAAM,EACN3H,MAAOgH,EACP1F,SA5Ba,SAAC3B,GACPA,EAAM4B,OAAOE,KAC1BzC,QAAQC,IAAIU,EAAM4B,SA2BZG,WAAY,CACVD,KAAM,gBACNmG,GAAI,qBAGN,4BAAQC,aAAW,OAAO7H,MAAM,KAC/B5B,EAAa8I,KAAI,SAACY,GAAD,OAAmB,4BAAQ9H,MAAO8H,GAAgBA,UCrC/DC,EAPO,WACpB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCHNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.4db95119.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState, createContext, useContext } from 'react'\n\nexport type WSSymbol = 'IET'|'N'|'ZHT'|'V'|'ELY'|'TZW'|'FIK'|'T'|'ZQ'|'NP'|'MJ'|'KG'|'OY'|'ITN'|'OB'|'ACM'|'QQ'|'X'|'XLC'|'S';\ntype WSErrorEvent = 'invalid stock symbol'| 'invalid message' | 'message too long'\ntype WSEvent = 'subscribe'|'unsubscribe'|'disconnecting'|'connected'|'error'|'stocks-update'|'disconected'\n\nexport type IStock = {\n  symbol?: WSSymbol;\n  companyName?: string;\n  catchPhrase?: string;\n  basePrice?: number;\n}\n\nexport interface IConfig {\n  event: WSEvent;\n  message: string;\n  stocksData:[IStock];\n  supportedSymbols?: [WSSymbol]\n}\n\nexport const initialIStock:IStock = {\n  companyName: '',\n  catchPhrase: '',\n  basePrice: 0\n}\n\nconst StocksContext = createContext<IStocksContext>({} as IStocksContext)\n\n// eslint-disable-next-line react/prop-types\nconst WSControl: React.FC = ({ children }) => {\n  const ws = useRef<WebSocket>()\n\n  const [initialConfig, setInitialConfig] = useState<IConfig>()\n  const [stockSymbols, setStockSymbols] = useState<WSSymbol[]>([])\n  const [isConnected, setIsConnected] = useState<boolean>(false)\n  const [monitor, setMonitor] = useState(new Map())\n\n  // LifeCycles\n  useEffect(() => {\n    ws.current = new WebSocket(`${process.env.REACT_APP_PROTOCOL}${process.env.REACT_APP_URL}:${process.env.REACT_APP_PORT}`, 'json')\n\n    ws.current.onopen = () => {\n      try {\n        console.log('CONNECTING')\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    ws.current.onerror = () => {\n      try {\n        console.error('Connection Error with WebSocket')\n        // getModelWebsocketStatus('ERROR')\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    return () => {\n      disconnect()\n    }\n  },\n  [])\n\n  useEffect(() => {\n    if (!ws.current) return\n    ws.current.onmessage = (e) => {\n      try {\n        const message = JSON.parse(e.data)\n        if (message.event === 'stocks-update') {\n          const symbol = (Object.keys(message.stocks)[0]) as WSSymbol\n          const value = (Object.values(message.stocks)[0])\n          isSubscribed(symbol) && (setMonitor(new Map(monitor.set(symbol, value))))\n        } else if (message.event === 'connected') {\n          setIsConnected(true)\n          setInitialConfig(message)\n        } else {\n          console.log(message)\n        }\n      } catch (error) {\n        console.error(error)\n      }\n    }\n  }, [isConnected, stockSymbols])\n\n  // Functions\n  function subscribe (newValue:WSSymbol) {\n    try {\n      if (!ws.current || isSubscribed(newValue)) return\n      const msg = {\n        event: 'subscribe',\n        stocks: [...stockSymbols, ...[newValue]]\n      }\n      setStockSymbols([...stockSymbols, ...[newValue]])\n      ws.current.send(JSON.stringify(msg))\n    } catch (error) {\n      console.error(error)\n    }\n  };\n  function unsubscribe (newValue:WSSymbol) {\n    try {\n      if (!ws.current || (!isSubscribed(newValue))) return\n      const msg = {\n        event: 'unsubscribe',\n        stocks: [newValue]\n      }\n      setStockSymbols(stockSymbols.filter(item => item !== newValue))\n      resetMonitor(newValue)\n      ws.current.send(JSON.stringify(msg))\n    } catch (error) {\n      console.error(error)\n    }\n  };\n\n  const isSubscribed = (symbol:WSSymbol) :boolean => Boolean(stockSymbols.find(element => symbol === element))\n  const resetMonitor = (symbol:WSSymbol) => (monitor.delete(symbol))\n  const disconnect = () => {\n    try {\n      if (!ws.current) return\n      setIsConnected(false)\n      ws.current.close()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // Render\n  return (\n    <StocksContext.Provider\n      value={{\n        initialConfig,\n        isConnected,\n        monitor,\n        stockSymbols,\n        subscribe,\n        isSubscribed,\n        unsubscribe\n      }}>\n      {children}\n    </StocksContext.Provider>\n  )\n}\n\nexport interface IStocksContext {\n  initialConfig: IConfig|undefined;\n  isConnected: boolean;\n  stockSymbols: WSSymbol[];\n  monitor: Map<string, number>;\n  isSubscribed(symbols:WSSymbol):boolean;\n  subscribe(symbols:WSSymbol):void;\n  unsubscribe(symbols:WSSymbol):void;\n}\n\nexport function useWs () {\n  const context = useContext(StocksContext)\n  return context\n}\nexport default WSControl\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n// eslint-disable-next-line no-unused-vars\nimport { useWs, WSSymbol } from './WSControl'\nimport Switch from '@material-ui/core/Switch'\n\nconst Stocks: React.FC = props => {\n  const { monitor, subscribe, unsubscribe } = useWs()\n  const symbol = props.children as WSSymbol\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.target.checked ? subscribe(symbol) : unsubscribe(symbol)\n  }\n  return (\n    <>\n      <Switch\n        onChange={handleChange}\n        name={symbol}\n        inputProps={{ 'aria-label': 'secondary checkbox' }}\n      />\n      <div>{monitor.get(symbol!) && Number(monitor.get(symbol!)).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\n    </>\n  )\n}\nexport default Stocks\n","import React, { useEffect, useState, useRef } from 'react'\nimport { theme } from './ChartTheme'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\n// eslint-disable-next-line no-unused-vars\nimport { useWs, WSSymbol } from './WSControl'\n\nHighcharts.setOptions(theme)\n\nconst ChartStock: React.FC = (children) => {\n  const { monitor, stockSymbols, isSubscribed } = useWs()\n  const [stockHistoy, setStockHistory] = useState<number[]>([])\n\n  const chartRef: any = useRef()\n  const symbol = children.children as string\n  const allowChartUpdate = true\n\n  useEffect(() => {\n    if (stockHistoy.length <= 100) {\n      setStockHistory([...stockHistoy, [...[monitor.get(symbol)]]] as number[])\n    } else {\n      // const temp = stockHistoy\n      // temp.shift()\n      // temp.push(monitor.get(symbol) as number)\n      chartRef.current.chart.series[0].addPoint(monitor.get(symbol) as number, true, true)\n    }\n  }, [monitor.get(symbol)])\n\n  useEffect(() => {\n    if (!(isSubscribed(symbol as WSSymbol))) {\n      setStockHistory([])\n    }\n  },\n  [stockSymbols])\n\n  const options: Highcharts.Options = {\n    series: [\n      {\n        type: 'line',\n        data: stockHistoy,\n        name: symbol as string\n      }\n    ],\n    xAxis: {\n\n      labels: {\n        enabled: false\n      }\n    },\n    chart: {\n      animation: false,\n      backgroundColor: {\n        linearGradient: { x1: 0, x2: 0, y1: 1, y2: 0 },\n        stops: [\n          [0, 'rgb(0, 0, 0)'],\n          [0.3, 'rgb(12, 12, 13)'],\n\n          [1, 'rgb(33, 49, 75)']\n        ]\n      }\n\n    },\n    credits: { enabled: false },\n    title: {\n      text: ''\n    }\n  }\n  return (\n    <HighchartsReact\n      highcharts={Highcharts}\n      allowChartUpdate={allowChartUpdate}\n      options={options}\n      ref= {chartRef}\n    />\n  )\n}\n\nexport default ChartStock\n","export const theme = {\n  colors: ['#2b908f', '#90ee7e', '#f45b5b', '#7798BF', '#aaeeee', '#ff0066', '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee'],\n  backgroundColor: {\n    linearGradient: [0, 0, 0, 300],\n    stops: [\n      [0, 'rgb(42, 42, 43)'],\n      [1, 'rgb(62, 62, 64)']\n    ],\n    style: {\n      fontFamily: '\\'Unica One\\', sans-serif'\n    },\n    plotBorderColor: '#606063'\n  },\n  title: {\n    style: {\n      color: '#E0E0E3',\n      textTransform: 'uppercase',\n      fontSize: '20px'\n    }\n  },\n  subtitle: {\n    style: {\n      color: '#E0E0E3',\n      textTransform: 'uppercase'\n    }\n  },\n  xAxis: {\n    gridLineColor: '#707073',\n    labels: {\n      style: {\n        color: '#E0E0E3'\n      }\n    },\n    lineColor: '#707073',\n    minorGridLineColor: '#505053',\n    tickColor: '#707073',\n    title: {\n      style: {\n        color: '#A0A0A3'\n      }\n    }\n  },\n  yAxis: {\n    gridLineColor: '#707073',\n    labels: {\n      style: {\n        color: '#E0E0E3'\n      }\n    },\n    lineColor: '#707073',\n    minorGridLineColor: '#505053',\n    tickColor: '#707073',\n    tickWidth: 1,\n    title: {\n      style: {\n        color: '#A0A0A3'\n      }\n    }\n  },\n  tooltip: {\n    backgroundColor: 'rgba(0, 0, 0, 0.85)',\n    style: {\n      color: '#F0F0F0'\n    }\n  },\n  plotOptions: {\n    series: {\n      dataLabels: {\n        color: '#F0F0F3',\n        style: {\n          fontSize: '13px'\n        }\n      },\n      marker: {\n        lineColor: '#333'\n      }\n    },\n    boxplot: {\n      fillColor: '#505053'\n    },\n    candlestick: {\n      lineColor: 'white'\n    },\n    errorbar: {\n      color: 'white'\n    }\n  },\n  legend: {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    itemStyle: {\n      color: '#E0E0E3'\n    },\n    itemHoverStyle: {\n      color: '#FFF'\n    },\n    itemHiddenStyle: {\n      color: '#606063'\n    },\n    title: {\n      style: {\n        color: '#C0C0C0'\n      }\n    }\n  },\n  credits: {\n    style: {\n      color: '#666'\n    }\n  },\n  labels: {\n    style: {\n      color: '#707073'\n    }\n  },\n  drilldown: {\n    activeAxisLabelStyle: {\n      color: '#F0F0F3'\n    },\n    activeDataLabelStyle: {\n      color: '#F0F0F3'\n    }\n  },\n  navigation: {\n    buttonOptions: {\n      symbolStroke: '#DDDDDD',\n      theme: {\n        fill: '#505053'\n      }\n    }\n  },\n  // scroll charts\n  rangeSelector: {\n    buttonTheme: {\n      fill: '#505053',\n      stroke: '#000000',\n      style: {\n        color: '#CCC'\n      },\n      states: {\n        hover: {\n          fill: '#707073',\n          stroke: '#000000',\n          style: {\n            color: 'white'\n          }\n        },\n        select: {\n          fill: '#000003',\n          stroke: '#000000',\n          style: {\n            color: 'white'\n          }\n        }\n      }\n    },\n    inputBoxBorderColor: '#505053',\n    inputStyle: {\n      backgroundColor: '#333',\n      color: 'silver'\n    },\n    labelStyle: {\n      color: 'silver'\n    }\n  },\n  navigator: {\n    handles: {\n      backgroundColor: '#666',\n      borderColor: '#AAA'\n    },\n    outlineColor: '#CCC',\n    maskFill: 'rgba(255,255,255,0.1)',\n    series: {\n      color: '#7798BF',\n      lineColor: '#A6C7ED'\n    },\n    xAxis: {\n      gridLineColor: '#505053'\n    }\n  }\n}\n","import React from 'react'\nimport Stocks from './Stocks'\nimport ChartStock from './ChartStock'\n// eslint-disable-next-line no-unused-vars\nimport { IStock } from './WSControl'\n\nconst ViewMonitor: React.FC = props => {\n  // eslint-disable-next-line react/prop-types\n  const { symbol, companyName, catchPhrase } = props.children as IStock\n  return (\n    <>\n      <ChartStock>{symbol}</ChartStock>\n      {companyName} - {catchPhrase}\n      <Stocks>{symbol}</Stocks>\n\n    </>\n  )\n}\nexport default ViewMonitor\n","import React, { useState } from 'react'\n// eslint-disable-next-line no-unused-vars\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { useWs, IStock, WSSymbol } from './WSControl'\nimport ViewMonitor from './ViewMonitor'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\n\nconst Monitor: React.FC = () => {\n  const { initialConfig, isConnected, stockSymbols } = useWs()\n  const [chartSelected, setChartSelected] = useState<WSSymbol>()\n\n  const handleChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n    const name = event.target.name as keyof typeof event\n    console.log(event.target)\n    // setChartSelected(event.target.value)\n  }\n\n  return (\n    <div>\n\n      {initialConfig?.stocksData.map(\n        (stock, index) => {\n          return (stock ? (\n            <div key={index}>\n              <ViewMonitor>{stock as IStock}</ViewMonitor>\n            </div>\n          ) : null)\n        }\n      )}\n      <br />\n      <small>\n        [status: {isConnected ? (<span>conectado</span>) : (<span>desconectado</span>) }]\n\n      </small>\n      <FormControl variant=\"outlined\">\n        <InputLabel htmlFor=\"symbols-selected\">Visualizar gráfico</InputLabel>\n        <Select\n          native\n          value={chartSelected}\n          onChange={handleChange}\n          inputProps={{\n            name: 'stocksActived',\n            id: 'symbols-selected'\n          }}\n        >\n          <option aria-label=\"None\" value=\"\" />\n          {stockSymbols.map((stocksActived) => <option value={stocksActived}>{stocksActived}</option>)}\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n\nexport default Monitor\n","import React from 'react'\nimport WSControl from './components/WSControl'\nimport Monitor from './components/Monitor'\n\nconst App: React.FC = () => {\n  return (\n    <WSControl>\n      <Monitor />\n    </WSControl>\n  )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}